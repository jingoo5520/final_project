<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.finalProject.mappers.memberMapper">
	<!-- 쿼리문 -->

	<!-- 로그인 -->
	<select id="login" resultType="LoginDTO">
		select * from members where
		member_id = #{member_id} and member_pwd = sha2(#{member_pwd}, 256)
	</select>

	<!-- id, email, phone_number 중복 체크 -->
	<select id="autoDuplicate" resultType="int">
		select count(*) from members
		<choose>
			<when test="key == 'id'">
				where member_id = #{value}
			</when>
			<when test="key == 'email'">
				where email = #{value}
				and member_status = 'active'
			</when>
			<when test="key == 'phone'">
				where phone_number = #{value}
				and member_status =
				'active'
			</when>
		</choose>

	</select>

	<!-- 회원가입 -->
	<insert id="signUpMember">
		insert into members(member_id, member_name,
		member_pwd, phone_number, birthday, gender, email, address, nickname,
		member_point)
		values(#{member_id}, #{member_name}, sha2(#{member_pwd},
		256),
		#{phone_number},
		#{birthday}, #{gender}, #{email}, #{address},
		#{nickname}, 5000)
	</insert>

	<!-- 자동 로그인 정보 저장 -->
	<update id="updateAutoLoginData">
		update members
		set autologin_code = #{autologin_code},
		autologin_date = DATE_ADD(NOW(), INTERVAL #{autologin_date} DAY)
		where
		member_id = #{member_id}
	</update>

	<!-- 자동 로그인 정보 조회 -->
	<select id="selectAutoLoginData" resultType="LoginDTO">
		select * from
		members where autologin_code = #{autologin_code} and autologin_date >
		now() and member_status = 'active'
	</select>

	<!-- 마이 페이지 회원 정보 조회 -->
	<select id="selectMemberById" resultType="MemberDTO">
		select * from members
		where member_id = #{member_id}
		and member_status = 'active'
	</select>

	<!-- 마이 페이지 회원 정보 수정 -->
	<update id="updateMember">
		update members
		set nickname = #{nickname}, gender =
		#{gender}, phone_number = #{phone_number}
		where member_id =
		#{member_id}
	</update>

	<!-- 마이 페이지 비밀번호 변경 -->
	<update id="updateMemberPwd">
		update members
		set member_pwd = sha2(#{member_pwd},
		256)
		where member_id = #{member_id}
	</update>

	<!-- 마이 페이지 회원탈퇴 -->
	<update id="withDrawMember">
		update members
		set member_status = 'withdrawn'
		where
		member_id = #{member_id}
	</update>

	<!-- 아이디 찾기 -->
	<select id="selectIdByEmail" resultType="LoginDTO">
		select member_id from
		members where email = #{email} and member_status = 'active'
	</select>

	<!-- 비밀번호 찾기 -->
	<select id="selectPwd" resultType="LoginDTO">
		select member_pwd from members
		where member_id = #{member_id} and email = #{email} and
		member_status =
		'active'
	</select>

	<!-- 비밀번호 찾기(랜덤비밀번호 지정) -->
	<update id="updateRandomPwd">
		update members
		set member_pwd = sha2(#{member_pwd},
		256)
		where member_id = #{member_id} and
		member_status = 'active'
	</update>

	<!-- 찜 목록 조회 -->
	<select id="selectWishListByMemberId" resultType="int">
		select
		product_no from wishes where member_id = #{member_id}
	</select>

	<!-- 찜 상태 확인 -->
	<select id="selectWish" resultType="int">
		select count(*) from wishes
		where member_id = #{member_id} and product_no = #{product_no}
	</select>

	<!-- 찜 정보 추가 -->
	<insert id="insertWish">
		insert into wishes (member_id, product_no)
		values
		(#{member_id}, #{product_no})
	</insert>

	<!-- 찜 정보 삭제 -->
	<delete id="deleteWish">
		delete from wishes where member_id = #{member_id} and
		product_no = #{product_no}
	</delete>

	<!-- 기본주소로 저장(회원가입) -->
	<insert id="saveAddressBySignUp">
		insert into delivery_addrs (delivery_name,
		delivery_address, is_main, member_id)
		values (#{addressName},
		#{address}, 'M', #{member_id})
	</insert>

	<!-- 이메일로 회원 조회(카카오 로그인) -->
	<select id="selectMemberByEmail" resultType="LoginDTO">
		select * from
		members where email = #{email} and member_status = 'active'
	</select>

	<!-- 주문페이지에서 입력한 주소로 회원 주소지 변경 -->
	<update id="updateAddress">
		update members
		set address = #{deliveryAddress}
		where
		member_id = #{memberId}
	</update>

	<!-- 배송지 저장 -->
	<insert id="insertDelivery">
		insert into delivery_addrs (delivery_name,
		delivery_address, is_main, member_id) values (#{deliveryName},
		#{deliveryAddress}, #{isMain}, #{memberId})
	</insert>

	<!-- 기본배송지 데이터 조회 -->
	<select id="selectMainDelivery" resultType="Integer">
		select delivery_no
		from delivery_addrs where member_id = #{member_id} and is_main = "M"
	</select>

	<!-- 기존의 기본배송지를 일반배송지로 변경 -->
	<update id="updateDeliveryMainToSub">
		update delivery_addrs set is_main = 'S' where
		delivery_no = #{delivery_no}
	</update>

	<select id="selectDeliveryList"
		resultType="com.finalProject.model.DeliveryDTO">
		select * from delivery_addrs where member_id = #{memberId}
	</select>

	<select id="selectCouponList"
		resultType="com.finalProject.model.PaidCouponDTO">
		select p.coupon_no, p.coupon_code, p.pay_date,
		p.expire_date, p.member,
		DATEDIFF(p.expire_date, #{currentTime}) as
		remaining_days,
		c.coupon_name, c.coupon_dc_type, c.coupon_dc_amount,
		c.coupon_dc_rate
		from coupon_paid p
		join coupons c
		on p.coupon_no =
		c.coupon_no
		left join coupon_used u
		on u.coupon_code = p.coupon_code and
		u.member_id = #{memberId}
		join members m
		on m.member_id = #{memberId} 
		where (p.member = #{memberId} or p.member = 'all')
		and #{currentTime} &gt;= p.pay_date 
		and #{currentTime} &lt; p.expire_date
		and u.coupon_code is null
		and p.pay_date &gt;= m.reg_date
	</select>

	<!-- naver_id로 회원 조회(네이버 로그인) -->
	<select id="selectMemberByNaverId" resultType="LoginDTO">
		select * from
		members where naver_id = #{naver_id} and member_status = 'active'
	</select>

	<!-- 네이버 회원가입 -->
	<insert id="signUpMemberByNaver">
		insert into members(member_id, member_name,
		member_pwd, phone_number, birthday, gender, email, address, nickname,
		naver_id)
		values(#{member_id}, #{member_name}, sha2(#{member_pwd},
		256),
		#{phone_number},
		#{birthday}, #{gender}, #{email}, #{address},
		#{nickname}, #{naver_id})
	</insert>

	<update id="updateDeliveryInfo">
		update delivery_addrs set
		delivery_name =
		#{delivery_name},
		delivery_address = #{delivery_address},
		is_main =
		#{is_main}
		where delivery_no = #{delivery_no}
	</update>

	<delete id="deleteDeliveryInfo">
		delete from delivery_addrs where delivery_no =
		#{deliveryNo}
	</delete>

	<select id="selectUsedCouponList"
		resultType="com.finalProject.model.UsedCouponDTO">
		select c.coupon_name, c.coupon_dc_type, c.coupon_dc_amount,
		c.coupon_dc_rate,
		p.member, u.use_date
		from coupons c
		inner join
		coupon_paid p
		on c.coupon_no = p.coupon_no
		inner join coupon_used u
		on
		u.coupon_code = p.coupon_code
		where u.member_id = #{memberId}
	</select>
	
	<select id="selectRecentCouponList" resultType="com.finalProject.model.RecentCouponDTO">
		select c.coupon_name, 
			   c.coupon_dc_type, 
			   c.coupon_dc_amount, 
			   c.coupon_dc_rate, 
			   p.member, 
			   p.pay_date, 
			   p.expire_date, 
			   u.use_date 
			   from coupons c 
			   inner join coupon_paid p 
			   on c.coupon_no = p.coupon_no 
			   and p.pay_date &gt; DATE_SUB(NOW(), INTERVAL 3 MONTH) 
			   left join coupon_used u 
			   on p.coupon_code = u.coupon_code 
			   and u.member_id = #{memberId} 
			   inner join members m
			   on m.member_id = #{memberId}
			   where (p.member = 'All' or p.member = #{memberId}) 
			   and p.pay_date &gt;= m.reg_date 
	</select>

	<select id="selectMemberPoint"
		resultType="com.finalProject.model.MemberPointDTO">
		select IFNULL(m.member_point,0) as member_point,
		IFNULL(sum(u.use_point),0) as use_point
		from members m, point_used u
		where m.member_id = #{memberId} and u.member_id = #{memberId}
	</select>

	<select id="selectCntOfEarnedPoint" resultType="Integer">
		select count(*)
		from point_earned where member_id = #{memberId}
	</select>

	<select id="selectCntOfUsedPoint" resultType="Integer">
		select count(*)
		from point_used where member_id = #{memberId} and use_point != 0
	</select>

	<select id="selectEarnedPointListByPageNo"
		resultType="com.finalProject.model.PointDTO">
		select e.earned_point as point, e.point_earned_date as
		pointRecordDate, i.point_reason as pointPaidReason
		from point_earned e
		join point_infos i on e.point_code = i.point_code
		where member_id =
		#{memberId}
		order by e.point_earned_date DESC limit 10 offset #{offset}
	</select>

	<select id="selectUsedPointListByPageNo"
		resultType="com.finalProject.model.PointDTO">
		select use_point as point, point_used_date as
		pointRecordDate
		from point_used
		where member_id = #{memberId} and
		use_point != 0
		order by point_used_date DESC limit 10 offset #{offset}
	</select>

	<!-- 회원 수 받기(스케쥴러) -->
	<select id="getMemberTotalCount" resultType="int">
		select
		count(member_id) from members
	</select>

	<!-- 회원 아이디 받기(스케쥴러) -->
	<select id="getMemberId" resultType="string">
		select member_id from
		members LIMIT 1 OFFSET #{i}
	</select>

	<!-- 회원의 1년간 결제금액 받기(스케쥴러) -->
	<select id="getTotalPriceByMemberId" resultType="int">
		SELECT
		IFNULL(SUM(p.total_price), 0) AS totalPrice
		FROM payments p
		INNER JOIN
		orders o ON o.order_id = p.order_id
		WHERE o.orderer_id = #{member_id}
		AND p.pay_date &gt; DATE_SUB(NOW(), INTERVAL 12 MONTH)
	</select>

	<!-- 회원 등급 업데이트 -->
	<update id="updateMemberLevel">
		update members SET member_level = (select level_no
		from levels l where (level_min*10000) &lt;= #{totalPrice} and
		(level_max*10000)
		&gt; #{totalPrice}) where member_id = #{member_id}
	</update>

	<!-- 회원 더미 데이터 insert -->
	<update id="tumpMemberData">
		insert into members(member_id, member_name,
		member_pwd, phone_number,
		birthday, email, address, nickname,
		member_point)
		values(#{member_id}, #{member_name}, sha2(#{member_pwd},
		256),
		#{phone_number},
		#{birthday}, #{email}, #{address},
		#{nickname},
		5000)
	</update>

	<!-- 회원 블랙정보 받기(로그인) -->
	<select id="getMemberBlackInfo" resultType="BlackInfoDTO">
		select * from blacks
		b where member_id = #{member_id}
	</select>

	<!-- 회원정보 수정후 로그인세션 업데이트 -->
	<select id="updateLoginSession" resultType="LoginDTO">
		select * from members
		where
		member_id = #{member_id}
	</select>

</mapper>