<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.finalProject.mappers.orderMapper">

	<select id="selectProductInfo" parameterType="list" resultType="com.finalProject.model.order.OrderProductDTO">
	    <foreach item="item" index="index" collection="list" separator="UNION ALL">
	        select p.*, i.image_url, #{item.quantity} AS quantity
	        from products p left join product_images i 
	        on p.product_no = i.product_no and i.image_type = 'M' 
	        where p.product_no = #{item.productNo}
	    </foreach>
	</select>

	<select id="selectMemberInfo" resultType="com.finalProject.model.order.OrderMemberDTO">
		select m.member_id, m.member_name, m.phone_number, m.email, m.address, m.member_point,
			   d.delivery_address, d.delivery_name, 
			   l.level_name, l.level_dc, l.level_point 
			   from members m 
			   inner join levels l on l.level_no = m.member_level 
			   left join delivery_addrs d on d.member_id = m.member_id and d.is_main = 'M'
			   where m.member_id = #{memberId}
	</select>
	
	<delete id="deleteProductsOfOrder">
		delete from order_products
		where order_id = #{order_id}
	</delete>
	
	<delete id="deleteOrder">
		delete from orders
		where order_id = #{order_id}
	</delete>
	
	<delete id="deleteProductsOfUncompletedOrder">
		delete from order_products
		where order_id in (
			select order_id from orders o
			where o.orderer_id = #{ordererId} and (
				o.payment_module_key is null or
				not exists (select 1 from payments p where o.order_id = p.order_id)
			)
		)
	</delete>
	
	<delete id="deleteUncompletedOrder">
		delete from orders 
		where orderer_Id = #{ordererId} and ( 
				payment_module_key is null or
				not exists (select 1 from payments p where orders.order_id = p.order_id) 
			)
	</delete>
	
	<delete id="deletePaidProductsFromCart">
		delete from cart_items
		where cart_no = (select cart_no from carts where member_id = #{memberId})
	</delete>
	
	<select id="getPrice" resultType="int">
		select
			case
				when product_dc_type = 'P'
				then cast((product_price - (1 - dc_rate)) as signed)
				when product_dc_type = 'N'
				then product_price
				when product_dc_type is null
				then product_price
			end
		from products
		where product_no = #{productNo}
	</select>
	
	<!-- 회원용 주문 테이블 만들기 -->
	<!-- TODO : level_dc_amount 계산 안함, 철회 가능도 그냥 "Y"로 함. -->
	<insert id="makeOrderByMember">
		insert into orders (
			order_id, orderer_id, coupon_no,
		    level_dc_rate, level_dc_amount, use_point, 
		    withdraw_possible, order_delivery,
		    order_status, order_request,
		    payment_module_type
		) select #{orderId}, #{request.ordererId}, cp.coupon_no,
			l.level_dc, 0, #{request.pointDC},
			"Y", #{request.deliveryAddress},
			1, #{request.deliveryRequest},
			case
				when #{request.paymentType} = 'CARD'
				then 'TC'
				when #{request.paymentType} = 'TRANSFER'
				then 'TA'
				when #{request.paymentType} = 'NAVER_PAY'
				then 'N'
				when #{request.paymentType} = 'KAKAO_PAY'
				then 'K'
				else null
			end
			from members m
			left join levels l on m.member_level = l.level_no <!-- members에 데이터가 있으면  -->
			left join coupon_paid cp on cp.coupon_code = #{request.couponUse}
			where m.member_id = #{request.ordererId}
<!-- //		public class PaymentRequestDTO {
//			private List<OrderRequestDTO> productsInfo; // 상품번호 + 수량 정보 리스트
//			private int totalPrice; // 총 예상 결제 금액
//		    private String paymentType; // 결제 방법
//		    private String saveDeliveryType; // 배송지 저장 구분
//		    private String deliveryName; // 배송지 이름
//		    private String deliveryAddress; // 배송지 주소
//		    private String deliveryRequest; // 배송 요청사항
//		    private String ordererId; // 주문자 ID
//		    private String ordererName; // 주문자 이름
//		    private String phoneNumber; // 주문자 전화번호
//		    private String email; // 주문자 이메일
//		    private int pointDC; // 사용 포인트
//		    private String couponUse; // 사용 쿠폰코드
//		} -->
	</insert>
	
	<!-- 비회원용 주문 테이블 만들기 -->
	<insert id="makeOrderByNonMember">
		insert into orders (
			order_id, orderer_id,
		    withdraw_possible, order_delivery,
		    payment_module_type
		) select #{orderId}, #{request.ordererId}, 'Y',
		#{request.deliveryAddress},
		case
			when #{request.paymentType} = 'CARD'
			then 'TC'
			when #{request.paymentType} = 'TRANSFER'
			then 'TA'
			when #{request.paymentType} = 'NAVER_PAY'
			then 'N'
			when #{request.paymentType} = 'KAKAO_PAY'
			then 'K'
			else null
		end
	</insert>
	
	<insert id="insertGuest">
		insert into guests (guest_id, guest_name, guest_email, guest_phone_number)
		select orderer_id, #{request.ordererName}, #{request.email}, #{request.phoneNumber}
		from orders where order_id = #{orderId}
	</insert>
	
	<insert id="insertOrderProduct">
		insert into order_products (order_id, product_no, product_dc_rate, product_dc_amount, order_count, product_price)
		<foreach collection="productInfoList" separator=" UNION ALL " item="product">
		select
			#{orderId},
			#{product.product_no},
			case
				when product_dc_type = 'P'
				then dc_rate
				when product_dc_type = 'N' or product_dc_type is null
				then 0.0
			end,
			case
				when product_dc_type = 'P'
				then cast((dc_rate * product_price) as signed)
				when product_dc_type = 'N' or product_dc_type is null
				then 0
			end,
			#{product.order_count}, 
			product_price
		from products
		where product_no = #{product.product_no}
		</foreach>
	</insert>
	
	<select id="selectDiscountInfoByProduct" resultType="com.finalProject.model.order.ProductDiscountDTO">
		select op.orderproduct_no,
			op.product_price as productPrice,
			op.order_count as orderCount,
			op.product_dc_rate as discountByItem,
			c.coupon_dc_amount as sumDiscountByCoupon, <!-- 쿠폰은 주문당 하나만 사용 가능함 -->
			c.coupon_dc_rate as multipliedDiscountByCoupon,
			o.use_point as sumDiscountByPoint, <!-- 비회원의 경우는 0임 -->
			case 
				when #{isMember} then (
						select level_dc 
						from levels l
						join members m on m.member_level = l.level_no
						where m.member_id = #{memberId}
					)
				else 0.0 <!-- 비회원의 경우는 레벨 할인이 0.0임 -->
			end as multipliedDiscountByMemberLevel
		from order_products op
		join orders o on o.order_id = op.order_id
		left join coupons c on c.coupon_no = o.coupon_no <!-- 쿠폰을 사용하지 않았을 수도 있음 -->
		where op.order_id = #{orderId}
	</select>
	
<!-- public class ProductDiscountDTO {
	private int orderproduct_no;
	
	//======================================================================================  
	// 개별상품별 퍼센트 할인
	// orderproduct_no마다 다를 수 있음
	// 예) orderproduct_no = 1일때 discountByItem = 0.03,
	// 	   orderproduct_no = 2일때 discountByItem = 0.05
	//======================================================================================  
	private float discountByItem;
	//======================================================================================  
	// 전체상품의 쿠폰 절대값 할인량
	// 예를 들어서 5000원 할인 쿠폰을 사용했다면
	// sumDiscountByCoupon = 5000
	//======================================================================================  
	private int sumDiscountByCoupon; 
	//======================================================================================  
	// 전체상품의 쿠폰 퍼센티지 할인량
	// 예를 들어서 7%원 할인 쿠폰을 사용했다면
	// multipliedDiscountByCoupon = 0.07
	//======================================================================================  
	private int multipliedDiscountByCoupon;
	//======================================================================================  
	// 전체상품의 등급 퍼센티지 할인량
	// 예를 들어서 회원이 골드 등급인 경우에는
	// multipliedDiscountByMemberLevel = 0.05
	//======================================================================================
	private int multipliedDiscountByMemberLevel;
	//======================================================================================  
	// 전체상품의 포인트 할인량
	// 예를 들어서 10000 포인트를 사용했다면
	// sumDiscountByPoint = 10000
	//======================================================================================  
	private int sumDiscountByPoint;
} -->

	<!-- 멤버 아이디로 오더 아이디 얻어오기 -->
	<select id="selectUncompletedOrderId" resultType="String">
		select order_id from orders where orderer_id = #{memberId} and payment_module_key is null
	</select>
	
	<!-- 오더 아이디로 예상 결제금액 얻어오기 -->
	<select id="selectExpectedTotalPrice" resultType="int">
		select total_price_expected from orders where order_id = #{orderId}
	</select>
	
	<!-- 예상 결제금액 저장하기 -->
	<update id="updateExpectedTotalPriceWithDeliveryCost">
		update orders set total_price_expected = (#{amount} + deliver_cost) where order_id = #{orderId}
	</update>
	
	<update id="updateRefundPriceByProduct">
		update order_products 
		set paid_amount = #{refundPrice}, assigned_point = #{refundPoint}
		where orderproduct_no = #{orderproduct_no}
	</update>
	
	<!-- 결제모듈 키 저장하기(결제취소 등에 쓰임) -->
	<update id="updatePaymentModuleKey">
		update orders set payment_module_key = #{key} where order_id = #{orderId}
	</update>
	
	<select id="selectPaymentModuleKey" resultType="String">
		select payment_module_key from orders where order_id = #{orderId}
	</select>
	
	<select id="selectCouponNoOfOrder" resultType="int">
		select coupon_no from orders where order_id = #{orderId}
	</select>
	
	<select id="selectDeliveryCost" resultType="int">
		select deliver_cost from orders where order_id = #{orderId}
	</select>
	
	<insert id="insertToCouponUsed">
		insert into coupon_used (member_id, coupon_code) values(
			(select orderer_id from orders where order_id = #{orderId}),
			#{couponCode}
		)
	</insert>
	
	<insert id="insertToPointUsed">
		insert into point_used (member_id, use_point) values(
			(select orderer_id from orders where order_id = #{orderId}),
			(select use_point from orders where order_id = #{orderId})
		)
	</insert>
	
	<update id="subtractUserPoint">
		update members
		set member_point = member_point - (select use_point from orders where order_id = #{orderId})  
		where member_id = (select orderer_id from orders where order_id = #{orderId})
	</update>
	
	<!-- 결제에 의한 포인트 적립 -->
	<update id="addUserPoint">
		update members m
		set m.member_point = 
			m.member_point + 
			(
				((select total_price_expected from orders where order_id = #{orderId}) - 2500)
				* (select level_point from levels where level_no = m.member_level)
			)
		where m.member_id = (select orderer_id from orders where order_id = #{orderId})
	</update>
	
	<!-- working : 포인트 적립 내역 작성-->
	<insert id="writePointEarnedLogByPurchase">		
		insert into point_earned (member_id, earned_point, point_code)
		select
			m.member_id,
			o.total_price_expected * l.level_point,
			1 <!-- 상품구매 point_code는 1이다 -->
		from orders o
		join members m on o.orderer_id = m.member_id
		join levels l on l.level_no = m.member_level
		where o.order_id = #{orderId}
	</insert>
	
	<!-- 회원등급 업데이트 -->
 	<update id="updateUserLevel">
 		<![CDATA[
 		update members m
		set m.member_level = 
			(
				select l.level_no
				from levels l
				where m.member_price >= l.level_min and m.member_price < l.level_max	
			)
		where m.member_id = (select orderer_id from orders where order_id = #{orderId})
		]]>
	</update>
	
	<!-- 결제정보 저장 -->
	<insert id="insertPaymentInfo">
		insert into payments (order_id, payment_status, payment_method, total_price, deposit_name, deposit_bank, deposit_account) 
		values (#{orderId}, #{status}, #{moduleName}, #{amount}, #{depositName}, #{depositBank}, #{depositAccount});
	</insert>
	
	<update id="updateOrderStatus">
		update orders
		set order_status = #{status}
		where order_id = #{orderId};
	</update>
	
	<select id="selectOrderId" resultType="String">
		select order_id from orders where orderer_id = #{memberId}
	</select>
	
	<select id="selectOrderIdByNonMember" resultType="String">
		select order_id from orders where orderer_id = 
		(
			select guest_id 
			from guests 
			where guest_name = #{name} and guest_email = #{email} and guest_phone_number = #{phoneNumber}
		)
	</select>
	
	<select id="selectProductList" resultType="com.finalProject.model.order.OrderProductDTO">
		select
			(
				case
				when c.cancel_apply_date is null
				then 'None'
				when c.cancel_apply_date is not null and c.cancel_complete_date is null and c.cancel_retract_date is null 
				then '환불대기중'
				when c.cancel_apply_date is not null and c.cancel_retract_date is not null
				then '환불취소'
				when c.cancel_complete_date is not null
				then '환불완료'
				end
			) as cancel_status,
			o.order_count as quantity, 
			o.orderproduct_no, 
			p.product_dc_type, 
			p.dc_rate, 
			p.product_price, 
			p.product_no, 
			p.product_name, 
			pi.image_url
		from order_products o
		join products p on p.product_no = o.product_no
		join product_images pi on (pi.product_no = p.product_no and pi.image_type = 'M')
		left join cancels c on (c.order_id = #{orderId} and c.order_product_no = o.orderproduct_no)
		where o.order_id = #{orderId}
	</select>
	
	<resultMap id="OrderInfoMap" type="java.util.Map">
	    <result property="order_id" column="order_id" javaType="java.lang.String"/>
	    <result property="order_date" column="order_date" javaType="java.sql.Timestamp"/>
	    <result property="order_status" column="order_status" javaType="java.lang.String" />
	    <result property="payment_module_type" column="payment_module_type" javaType="java.lang.String" />
	</resultMap>
	
	<select id="selectOrderInfo" resultMap="OrderInfoMap">
		select order_id, order_date, order_status, payment_module_type from orders where order_id = #{orderId}
	</select>
	
	<insert id="insertCancel">
		insert into cancels (order_id, order_product_no, cancel_type, cancel_status, cancel_retract_date, cancel_reason)
		<foreach item="product" index="index" collection="productRequestList" separator=" UNION ALL ">
	        select 
	        	#{orderId}, 
	        	#{product.orderproductNo},
	        	#{cancelType},
	        	case
	        		when #{product.request} = '환불취소' then '취소 철회'
	        		when #{product.request} = '환불신청' then '취소 요청'
	        	end,
	        	case
	        		when #{product.request} = '환불취소' then current_timestamp
	        		when #{product.request} = '환불신청' then null
	        	end,
	        	#{cancelReason}
	    </foreach>
	    on duplicate key update
	    	cancel_type = values(cancel_type),
	    	cancel_status = values(cancel_status),
	    	cancel_retract_date = values(cancel_retract_date),
	    	cancel_reason = values(cancel_reason)
	</insert>
	
	<update id="updateAccountInfo">
		update payments
		set deposit_name = #{depositName}, deposit_bank = #{depositBank}, deposit_account = #{depositAccount}
		where order_id = #{orderId}
	</update>
	
	<update id="updateOrderStatusAuto">
		<![CDATA[
		update orders
		set order_status = 6
		where order_status = 2 and order_date <= date_sub(current_timestamp(), interval 7 day);
		]]>
	</update>
</mapper>