<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.finalProject.mappers.productMapper">
   <!-- 쿼리문 -->
<!-- 생성일에 따른 모든 상품 나열 -->
<select id="selectProductsByPage" parameterType="map" resultType="ProductDTO">
    select p.product_no, 
           p.product_name, 
           p.product_price, 
           p.product_category, 
           p.dc_rate, 
           p.product_dc_type, 
           p.product_sell_count,
           max(pi.image_url) as image_url, 
           c.category_name, 
           avg(r.review_score) as average_score 
    from products p
    left join product_images pi on p.product_no = pi.product_no
    join categories c on p.product_category = c.category_no 
    left join reviews r on p.product_no = r.product_no 
    where p.product_delete = 'N'
    group by p.product_no, 
             p.product_name, 
             p.product_price, 
             p.product_category, 
             c.category_name
    order by p.product_reg_date desc
    limit #{limit} offset #{offset}
</select>

	
	<select id="selectProductCount" resultType="int">
	        select count(*) 
		    from products 
		    where product_delete = 'N'
		    <if test="category != null">
		        and category = #{category}
		    </if>
	</select>
	
<!-- 카테고리별 상품 조회 쿼리문: 정렬 기준 추가 -->
<!-- <select id="selectProductsByCategoryAndPage" parameterType="map" resultType="ProductDTO"> -->
<!--     select p.product_no, p.product_name, p.product_price, p.product_category, p.dc_rate, p.product_dc_type, p.product_sell_count, -->
<!-- 	           max(pi.image_url) as image_url, c.category_name, avg(r.review_score) as average_score  -->
<!--     from products p -->
<!--     left join product_images pi on p.product_no = pi.product_no -->
<!--     join categories c on p.product_category = c.category_no -->
<!--     left join reviews r on p.product_no = r.product_no  -->
<!--     where p.product_delete = 'N' -->
<!--     <if test="category != null"> -->
<!--         and p.product_category = #{category}  카테고리 번호로 필터 -->
<!--     </if> -->
<!--     group by p.product_no, p.product_name, p.product_price, p.product_category, c.category_name -->
<!--     정렬 기준 추가 -->
<!--     <choose> -->
<!--     <when test="sortOrder == 'new'"> -->
<!--         order by p.product_reg_date desc  신상품순 -->
<!--     </when> -->
<!--     <when test="sortOrder == 'popular'"> -->
<!--         order by p.product_sell_count desc  인기상품순 (판매 수 기준) -->
<!--     </when> -->
<!--     <when test="sortOrder == 'lowPrice'"> -->
<!--         order by  -->
<!--         CASE  -->
<!--             WHEN p.product_dc_type = 'P' THEN (p.product_price * (1 - p.dc_rate )) -->
<!--             ELSE p.product_price -->
<!--         END asc  낮은가격순 -->
<!--     </when> -->
<!--     <when test="sortOrder == 'highPrice'"> -->
<!--         order by  -->
<!--         CASE  -->
<!--             WHEN p.product_dc_type = 'P' THEN (p.product_price * (1 - p.dc_rate)) -->
<!--             ELSE p.product_price -->
<!--         END desc  높은가격순 -->
<!--     </when> -->
<!--     <otherwise> -->
<!--         order by p.product_reg_date desc  기본: 신상품순 -->
<!--     </otherwise> -->
<!-- </choose> -->
<!--     limit #{limit} offset #{offset} -->
<!-- </select> -->

<select id="selectProductsByCategoryAndPage" parameterType="map" resultType="ProductDTO">
    select 
        p.product_no, 
        p.product_name, 
        p.product_price, 
        p.product_category, 
        p.dc_rate, 
        p.product_dc_type, 
        p.product_sell_count,
        max(pi.image_url) as image_url, 
        c.category_name, 
        avg(r.review_score) as average_score, <!-- 별점 평균 -->
        count(r.review_no) as review_count  <!-- 리뷰 개수 -->
    from 
        products p
    left join 
        product_images pi on p.product_no = pi.product_no
    join 
        categories c on p.product_category = c.category_no
    left join 
        reviews r on p.product_no = r.product_no 
    where 
        p.product_delete = 'N'
        <if test="category != null">
            and p.product_category = #{category}  <!-- 카테고리 번호로 필터 -->
        </if>
    group by 
        p.product_no, 
        p.product_name, 
        p.product_price, 
        p.product_category, 
        c.category_name
    <choose>
        <when test="sortOrder == 'new'">
            order by p.product_reg_date desc  <!-- 신상품순 -->
        </when>
        <when test="sortOrder == 'popular'">
            order by p.product_sell_count desc  <!-- 인기상품순 -->
        </when>
        <when test="sortOrder == 'lowPrice'">
            order by 
            CASE 
                WHEN p.product_dc_type = 'P' THEN (p.product_price * (1 - p.dc_rate))
                ELSE p.product_price
            END asc  <!-- 낮은가격순 -->
        </when>
        <when test="sortOrder == 'highPrice'">
            order by 
            CASE 
                WHEN p.product_dc_type = 'P' THEN (p.product_price * (1 - p.dc_rate))
                ELSE p.product_price
            END desc  <!-- 높은가격순 -->
        </when>
        <when test="sortOrder == 'manyReview'">
            order by review_count desc  <!-- 리뷰많은순 -->
        </when>
        <otherwise>
            order by p.product_reg_date desc  <!-- 기본: 신상품순 -->
        </otherwise>
    </choose>
    limit #{limit} offset #{offset}
</select>



<!-- 전체 상품 개수 조회 쿼리문 -->
	<select id="selectProductCountByCategory" parameterType="int" resultType="int">
	    select count(*) 
	    from products p
	    where p.product_delete = 'N'
	    <if test="category != null">
	        and p.product_category = #{category}  <!-- 카테고리 번호로 필터 -->
	    </if>
	</select>
	
	
	<select id="getProductById" parameterType="int" resultType="ProductDTO">
	    select p.*, c.*, pi.image_url, pi.image_type from products p
	    left join categories c on p.product_category = c.category_no
	    left join product_images pi on p.product_no = pi.product_no
	    where p.product_no = #{product_no}
	</select>
	
	<select id="selectProductDetailById" parameterType="int" resultType="ProductDTO">
    SELECT p.*, c.category_name 
    FROM products p
    LEFT JOIN categories c ON p.product_category = c.category_no
    WHERE p.product_no = #{product_no}
</select>
   


<select id="countSearchResults" parameterType="map" resultType="int">
    SELECT 
        COUNT(*) 
    FROM 
        products p
    WHERE 
        p.product_delete = 'N'
        AND (#{search} IS NULL OR p.product_name LIKE CONCAT('%', #{search}, '%'))
        AND (#{category} IS NULL OR p.product_category = #{category})
</select>

<select id="searchProducts" parameterType="map" resultType="ProductDTO">
    SELECT 
        p.product_no, 
        p.product_name, 
        p.product_price, 
        p.product_category, 
        p.dc_rate, 
        p.product_dc_type, 
        p.product_sell_count,
        COALESCE(MAX(pi.image_url), '/resources/images/noP_image.png') AS image_url, 
        c.category_name, 
        AVG(r.review_score) AS average_score,  <!-- 평균 별점 -->
        COUNT(r.review_no) AS review_count   <!-- 리뷰 개수 -->
    FROM 
        products p
    LEFT JOIN 
        product_images pi ON p.product_no = pi.product_no
    JOIN 
        categories c ON p.product_category = c.category_no 
    LEFT JOIN 
        reviews r ON p.product_no = r.product_no 
    WHERE 
        p.product_delete = 'N'
        AND (#{search} IS NULL OR p.product_name LIKE CONCAT('%', #{search}, '%'))
        AND (#{category} IS NULL OR p.product_category = #{category})
    GROUP BY 
        p.product_no, 
        p.product_name, 
        p.product_price, 
        p.product_category, 
        p.dc_rate, 
        p.product_dc_type, 
        p.product_sell_count, 
        c.category_name
    ORDER BY 
        <choose>
            <when test="'new'.equals(sortOrder)">
                p.product_reg_date DESC
            </when>
            <when test="'popular'.equals(sortOrder)">
                p.product_sell_count DESC
            </when>
            <when test="'lowPrice'.equals(sortOrder)">
                CASE 
                    WHEN p.product_dc_type = 'P' THEN (p.product_price * (1 - p.dc_rate))
                    ELSE p.product_price
                END ASC
            </when>
            <when test="'highPrice'.equals(sortOrder)">
                CASE 
                    WHEN p.product_dc_type = 'P' THEN (p.product_price * (1 - p.dc_rate))
                    ELSE p.product_price
                END DESC
            </when>
            <when test="'manyReview'.equals(sortOrder)"> <!-- 리뷰 많은 순 추가 -->
                review_count DESC
            </when>
            <otherwise>
                p.product_reg_date DESC
            </otherwise>
        </choose>
    LIMIT 
        #{limit} OFFSET #{offset}
</select>



<!-- <resultMap id="ReviewWithImagesMap" type="ProductDetailReviewDTO"> -->
<!--     <id property="review_no" column="review_no" /> -->
<!--     <result property="product_no" column="product_no" /> -->
<!--     <result property="member_id" column="member_id" /> -->
<!--     <result property="review_title" column="review_title" /> -->
<!--     <result property="review_content" column="review_content" /> -->
<!--     <result property="register_date" column="register_date" /> -->
<!--     <result property="review_score" column="review_score" /> -->
<!--     <result property="nickname" column="nickname" /> -->
<!--     <collection property="reviewImgs" ofType="String"> -->
<!--         <result column="image_url" /> -->
<!--     </collection> -->
<!-- </resultMap> -->

<resultMap id="ReviewWithImagesMap" type="ProductDetailReviewDTO">
    <id property="review_no" column="review_no" />
    <result property="product_no" column="product_no" />
    <result property="member_id" column="member_id" />
    <result property="review_title" column="review_title" />
    <result property="review_content" column="review_content" />
    <result property="register_date" column="register_date" />
    <result property="review_ref" column="review_ref" />
    <result property="review_score" column="review_score" />
    <result property="nickname" column="nickname" />
    <result property="reviewImgs" column="review_imgs" />
</resultMap>


<!-- <select id="selectReview" parameterType="map" resultMap="ReviewWithImagesMap"> -->
<!-- SELECT   -->
<!--     r.review_no, -->
<!--     r.member_id, -->
<!--     r.review_title, -->
<!--     r.review_content, -->
<!--     r.register_date, -->
<!--     r.review_ref, -->
<!--     r.review_score, -->
<!--     m.nickname, -->
<!--     ri.image_url -->
<!-- FROM  -->
<!--     reviews r -->
<!-- JOIN  -->
<!--     members m ON r.member_id = m.member_id -->
<!-- LEFT JOIN  -->
<!--     review_images ri ON r.review_no = ri.review_no -->
<!-- WHERE  -->
<!--     r.product_no = #{product_no} -->
<!--     AND r.review_show = 'S' -->
<!--     AND (r.review_ref IS NULL OR  -->
<!--          (r.review_ref IS NOT NULL AND  -->
<!--           (SELECT review_show FROM reviews WHERE review_no = r.review_ref) = 'S')) -->
<!-- ORDER BY  -->
<!--     CASE WHEN r.review_ref IS NULL THEN r.review_no ELSE r.review_ref END DESC,   -->
<!--     r.review_ref IS NOT NULL,                                                     -->
<!--     r.register_date ASC -->
<!--     LIMIT #{offset}, #{limit} -->
<!-- </select> -->

<select id="selectReview" parameterType="map" resultMap="ReviewWithImagesMap">
SELECT  
    r.review_no,
    r.product_no,
    r.member_id,
    r.review_title,
    r.review_content,
    r.register_date,
    r.review_ref,
    r.review_score,
    m.nickname,
    GROUP_CONCAT(ri.image_url) AS review_imgs
FROM 
    reviews r
JOIN 
    members m ON r.member_id = m.member_id
LEFT JOIN 
    review_images ri ON r.review_no = ri.review_no
WHERE 
    r.product_no = #{product_no}
    AND r.review_show = 'S'
    AND (r.review_ref IS NULL OR 
         (r.review_ref IS NOT NULL AND 
          (SELECT review_show FROM reviews WHERE review_no = r.review_ref) = 'S'))
GROUP BY 
    r.review_no, 
    r.product_no, 
    r.member_id, 
    r.review_title, 
    r.review_content, 
    r.register_date, 
    r.review_ref, 
    r.review_score, 
    m.nickname
ORDER BY 
    CASE WHEN r.review_ref IS NULL THEN r.review_no ELSE r.review_ref END DESC,  
    r.review_ref IS NOT NULL,                                                    
    r.register_date ASC
LIMIT #{offset}, #{limit}

</select>


<!-- <select id="selectReviewImg" parameterType="int" resultType="string"> -->
<!--     select  -->
<!--         ri.image_url -->
<!--     from  -->
<!--         review_images ri -->
<!--     join  -->
<!--         reviews r on r.review_no = ri.review_no -->
<!--     where  -->
<!--         r.product_no = #{product_no} -->
<!--         and r.review_show = 'S' -->
<!-- </select> -->

<select id="countReview" resultType="int">
	SELECT COUNT(*) FROM reviews WHERE product_no = #{productNo}
</select>












	<insert id="saveProduct"
		parameterType="com.finalProject.model.admin.product.ProductDTO"
		useGeneratedKeys="true" keyProperty="product_no">
		INSERT INTO products
		(product_name,
		product_price,
		product_content,
		product_category,product_dc_type, dc_rate,
		product_sell_count,product_stock_count,product_show)
		VALUES
		(#{product_name}, #{product_price},
		#{product_content}, #{category_no},
		#{product_dc_type}, #{dc_rate},
		#{product_sell_count},#{product_stock_count},#{product_show});
	</insert>

	<insert id="saveMainImage" parameterType="map">
		INSERT INTO
		product_images
		(product_no, image_url,image_type)
		VALUES (#{product_no},
		#{mainImage},'M')
	</insert>

	<insert id="saveSubImage" parameterType="map">
		INSERT INTO product_images (product_no, image_url, image_type)
		VALUES
		<foreach collection="subImage" item="sub_Image" separator=",">
			(#{product_no}, #{sub_Image},'S')
		</foreach>
	</insert>

	<resultMap
		type="com.finalProject.model.admin.product.ProductVO"
		id="productResultMap">
		<id column="product_no" property="product_no" javaType="int" />
		<result column="product_name" property="product_name"
			javaType="String" />
		<result column="product_price" property="product_price"
			javaType="int" />
		<result column="product_content" property="product_content"
			javaType="String" />
		<result column="product_dc_type" property="product_dc_type"
			javaType="String" />
		<result column="dc_rate" property="dc_rate" javaType="int" />
		<result column="product_sell_count"
			property="product_sell_count" javaType="int" />

		<collection column="product_no" property="list"
			ofType="com.finalProject.model.admin.product.ProductImg"
			javaType="java.util.List" select="getAllImg" />
	</resultMap>

	<select id="getAllBoard" resultMap="productResultMap">
		SELECT product_no,
		product_name, product_price, product_content, product_dc_type,
		dc_rate,
		product_sell_count
		FROM products
		limit #{startRowIndex}
		,#{viewPostCntPerPage}
	</select>

	<select id="getAllImg"
		resultType="com.finalProject.model.admin.product.ProductImg">
		SELECT image_url, image_type FROM product_images WHERE
		product_no =
		#{product_no}
	</select>

	<update id="updateProduct">
		update products set product_name = #{product_name} ,
		product_price = #{product_price}
		, product_dc_type =
		#{product_dc_type}, dc_rate =
		#{dc_rate},
		product_sell_count =
		#{product_sell_count} where
		product_no
		=#{product_no};
	</update>

	<select id="getSearchProduct" resultMap="productSearchResultMap">
		SELECT product_no, product_name, product_price, product_content,
		product_dc_type, dc_rate, product_sell_count
		FROM products
		WHERE 1=1
		<if test="product_name != null and product_name != ''">
			AND product_name LIKE #{product_name}
		</if>
		<if test="product_dc_type != null and product_dc_type.size() > 0">
			AND product_dc_type IN
			<foreach item="type" collection="product_dc_type" open="("
				close=")" separator=",">
				#{type}
			</foreach>
		</if>
		<if test="reg_date_start != null and reg_date_start != ''">
			AND product_reg_date &gt; #{reg_date_start}
		</if>
		<if test="reg_date_end != null and reg_date_end != ''">
			AND product_reg_date &lt; #{reg_date_end}
		</if>
		<choose>
			<when test="searchType == 'priceHigh'">
				order by product_price desc
			</when>
			<when test="searchType == 'priceLow'">
				order by product_price
			</when>
			<when test="searchType == 'sortAmountLow'">
				order by dc_rate
			</when>
			<when test="searchType == 'sortAmountHigh'">
				order by dc_rate desc
			</when>
		</choose>
		limit #{startRowIndex} ,#{viewPostCntPerPage}
	</select>

	<resultMap
		type="com.finalProject.model.admin.product.ProductVO"
		id="productSearchResultMap">
		<id column="product_no" property="product_no" javaType="int" />
		<result column="product_name" property="product_name"
			javaType="String" />
		<result column="product_price" property="product_price"
			javaType="int" />
		<result column="product_content" property="product_content"
			javaType="String" />
		<result column="product_dc_type" property="product_dc_type"
			javaType="String" />
		<result column="dc_rate" property="dc_rate" javaType="float" />
		<result column="product_sell_count"
			property="product_sell_count" javaType="int" />

		<collection column="product_no" property="list"
			ofType="com.finalProject.model.admin.product.ProductImg"
			javaType="java.util.List" select="getAllImg" />
	</resultMap>

	<select id="getCountAllProduct" resultType="int">
		select count(*) from
		products
	</select>

	<select id="getSearchAllProduct" resultType="int">
		select count(*) from products
		where 1=1
		<if test="product_name != null and product_name != ''">
			AND product_name LIKE #{product_name}
		</if>
		<if test="product_dc_type != null and product_dc_type.size() > 0">
			AND product_dc_type IN
			<foreach item="type" collection="product_dc_type" open="("
				close=")" separator=",">
				#{type}
			</foreach>
		</if>
		<if test="reg_date_start != null and reg_date_start != ''">
			AND product_reg_date &gt; #{reg_date_start}
		</if>
		<if test="reg_date_end != null and reg_date_end != ''">
			AND product_reg_date &lt; #{reg_date_end}
		</if>
		<choose>
			<when test="searchType == 'priceHigh'">
				order by product_price desc
			</when>
			<when test="searchType == 'priceLow'">
				order by product_price
			</when>
			<when test="searchType == 'sortAmountLow'">
				order by dc_rate
			</when>
			<when test="searchType == 'sortAmountHigh'">
				order by dc_rate desc
			</when>
		</choose>
	</select>

	<delete id="deleteProductImg">
		delete from product_images where product_no = #{product_no}
		<if test="product_main_image !=null and product_main_image != ''">
			and image_url = #{product_main_image}
		</if>
		<if test="product_sub_image !=null">
			<foreach item="sub_image" collection="product_sub_image"
				open="or" separator="or">
				image_url = #{sub_image}
			</foreach>
		</if>
	</delete>

	<delete id="deleteProduct">
		delete from products where product_no = #{productId}
	</delete>

	<select id="getCategories"
		resultType="com.finalProject.model.admin.product.adminCategories">
		select * from categories
	</select>
	<update id="updateContent">
		update products set product_content = #{content}
		where
		product_no = #{product_no}
	</update>

	<update id="deleteContentImg" parameterType="int">
        UPDATE products SET product_content = NULL WHERE product_no = #{product_no}
    </update>
</mapper>