<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.finalProject.mappers.adminMapper">

	<!-- 회원 총 수 가져오기 -->
	<select id="selectAllMemberCnt" resultType="int">
		select count(*) from
		members;
	</select>

	<!-- 지난 달 회원 가입 수 가져오기 -->
	<select id="selectLastMonthMemberRegCnt" resultType="int">
		select
		COUNT(*)
		from members
		where MONTH(reg_date) = MONTH(DATE_SUB(CURDATE(),
		INTERVAL 1 MONTH))
		and YEAR(reg_date) = YEAR(DATE_SUB(CURDATE(),
		INTERVAL 1 MONTH));
	</select>

	<!-- 성별 별 회원 수 가져오기 -->
	<select id="selectMembersByGender" resultType="GenderCountDTO">
		SELECT gender,
		COUNT(*) as count
		FROM members
		GROUP BY gender;
	</select>

	<!-- 레벨 별 회원 수 가져오기 -->
	<select id="selectMembersByLevel" resultType="LevelCountDTO">
		SELECT
		member_level,
		COUNT(*) as count
		FROM members
		GROUP BY member_level;
	</select>

	<!-- 기간에 따른 가입자 수 가져오기 -->
	<select id="selectRangedMemberRegCnt" resultType="int">
		SELECT COUNT(*) as count
		FROM members
		<![CDATA[
		where reg_date >= #{regDate_start} 
		and reg_date <= #{regDate_end} 
		]]>
	</select>

	<!-- 특정 날 가입 수 가져오기 -->
	<select id="selectMemberRegCnt" resultType="int">
		SELECT COUNT(*) as
		count
		FROM members
		where DATE(reg_date) = DATE(#{time})
	</select>

	<!-- 대기 상태의 문의 수 -->
	<select id="selectWaitInquiryCnt" resultType="int">
		select count(*)
		from inquiries where inquiry_status = 'W'
	</select>

	<!-- 특정 날 판매 량 -->
	<select id="selectDaySaleCnt" resultType="int">
		SELECT
		IFNULL(SUM(op.order_count), 0)
		FROM payments p
		JOIN orders o ON
		p.order_id =
		o.order_id
		JOIN order_products op ON o.order_id =
		op.order_id
		WHERE
		DATE(p.pay_date) = DATE(#{time})
	</select>

	<!-- 특정 날 매출 -->
	<select id="selectDayRevenue" resultType="int">
		SELECT
		IFNULL(SUM(total_price), 0)
		FROM payments
		WHERE DATE(pay_date) =
		DATE(#{time})
	</select>

	<!-- 카테고리별 총 판매 량 가져오기 -->
	<select id="selectTotalSales" resultType="SaleCountDTO">
		select
		c.category_name,
		sum(op.order_count) as count
		from payments p
		join orders o ON p.order_id
		= o.order_id
		join order_products op on o.order_id = op.order_id
		join
		products pr on op.product_no = pr.product_no
		join categories c on
		pr.product_category = c.category_no
		group by pr.product_category
	</select>

	<!-- 특정 달의 판매량 가져오기 -->
	<select id="selectSalesByMonth" resultType="SaleCountDTO">
		select
		c.category_name, sum(op.order_count) as count
		from payments p
		join
		orders o ON p.order_id = o.order_id
		join order_products op on
		o.order_id = op.order_id
		join products pr on op.product_no =
		pr.product_no
		join categories c on pr.product_category = c.category_no
		WHERE DATE_FORMAT(p.pay_date, '%Y-%m') = #{selectedMonth}
		group by
		pr.product_category
	</select>

	<!-- 카테고리별 총 매출 가져오기 -->
	<select id="selectTotalRevenues" resultType="RevenueDTO">
		select
		pr.product_category,c.category_name ,sum(p.total_price) as revenue
		from payments p
		join orders o ON p.order_id = o.order_id
		join
		order_products op on o.order_id = op.order_id
		join products pr on
		op.product_no = pr.product_no
		join categories c on pr.product_category
		= c.category_no
		group by pr.product_category
	</select>


	<!-- 특정 달의 카테고리별 매출 가져오기 -->
	<select id="selectRevenuesByMonth" resultType="RevenueDTO">
		select
		pr.product_category,c.category_name ,sum(p.total_price) as revenue
		from payments p
		join orders o ON p.order_id = o.order_id
		join
		order_products op on o.order_id = op.order_id
		join products pr on
		op.product_no = pr.product_no
		join categories c on pr.product_category
		= c.category_no
		WHERE DATE_FORMAT(p.pay_date, '%Y-%m') =
		#{selectedMonth}
		group by pr.product_category
	</select>

	<!-- 특정 달 카테고리별 총 판매 량 가져오기 -->
	<select id="selectCancelSales" parameterType="java.util.List"
		resultType="com.finalProject.model.admin.CancelCountDTO">
		SELECT c.category_name, SUM(op.order_count) AS count
		FROM cancels can
		JOIN order_products op ON can.order_product_no = op.orderproduct_no
		JOIN products p ON op.product_no = p.product_no
		JOIN categories c ON
		p.product_category = c.category_no
		<if test="list != null and list.size() > 0">
			WHERE can.cancel_no IN
		</if>
		<foreach item="cancel" collection="list" open="("
			separator="," close=")">
			#{cancel}
		</foreach>
		GROUP BY c.category_name
	</select>

	<!-- 카테고리 별 총 취소량 가져오기 -->
	<select id="selectCancelByMonth"
		resultType="com.finalProject.model.admin.CancelCountDTO">

		SELECT c.category_name, SUM(op.order_count) AS count
		FROM
		cancels can
		JOIN order_products op ON can.order_product_no =
		op.orderproduct_no
		JOIN products p ON op.product_no = p.product_no
		JOIN
		categories c ON p.product_category = c.category_no
		GROUP BY
		c.category_name;
	</select>
	<!-- 특정 달의 취소번호 가져오기 -->
	<select id="CategoryCancelByDateCnt" resultType="String">
		SELECT cancel_no
		FROM refunds
		WHERE DATE_FORMAT(refund_receive_date, '%Y-%m') =
		#{selectedMonth}
	</select>
	<select id="refundsCancel" resultType="String">
		select cancel_no from
		refunds
	</select>
	<!-- 특정달 혹은 전체달의 취소 가격량 가져오기 -->
	<select id="selectTotalCancelRevenues"
		resultType="com.finalProject.model.admin.CancelRevenueDTO">
		SELECT c.category_name as category_name, SUM(op.paid_amount) AS
		revenue
		FROM cancels can
		JOIN order_products op ON can.order_product_no
		= op.orderproduct_no
		JOIN products p ON op.product_no = p.product_no
		JOIN categories c ON p.product_category = c.category_no
		<if test="list != null and list.size() > 0">
			WHERE can.cancel_no IN
		</if>
		<foreach item="cancel" collection="list" open="("
			separator="," close=")">
			#{cancel}
		</foreach>
		group by p.product_category
	</select>

	<select id="getCancelCnt" resultType="int">
		select count(*) from
		cancels where cancel_type = 'cancel' and cancel_status= '취소 요청'
	</select>
	<select id="getRefundCnt" resultType="int">
		select count(*) from cancels where cancel_type = 'return' and cancel_status = '취소 요청'
	</select>
</mapper>